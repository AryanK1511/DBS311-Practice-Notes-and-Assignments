Q1) In the employees collection, using Mongo query display all the employee ids and emails.
Ans) db.employees.find({}, {"employee_id": 1, "email": 1,"_id": 0})

Q2) In the product collection, display all the product id, product name and list price
Ans) db.products.find({}, {"product_id": 1, "product_name": 1, "list_price": 1, "_id": 0})

Q3) In the employees collection, using Mongo query display all the employee ids, emails and manager id whose manger ids are 1,3,9.
Ans) db.employees.find({"manager_id": {"$in": [1, 3, 9]}}, {"employee_id": 1, "email": 1, "manager_id": 1, "_id": 0})

Q4) In the product collection, display all the product id, product name and list price whose list price are in range between 500 to 600
Ans) db.products.find({"list_price": {"$gte": 500, "$lte": 600}}, {"product_id": 1, "product_name": 1, "list_price": 1, "_id": 0})

Q5) In the employees collection, using Mongo query display all the employee ids, hire date and first name who are hired in August 2015.
Ans) db.employees.find({ $expr: { $eq: [ { $month: "$hire_date" }, 8] } }, { "employee_id": 1, "hire_date": 1, "first_name": 1, "_id": 0 })

Q6) In the product collection, display all the product id, product name and standard cost whose standard cost are NOT in the range between 800 to 1000
Ans) db.products.find({"$or": [{"standard_cost": {"$lt": 800}}, {"standard_cost": {"$gt": 1000}}]}, {"product_id": 1, "product_name": 1, "standard_cost": 1, "_id": 0})

Q7) In the employees collection, using Mongo query display all the data except email,_id, phone and job title.
Ans) db.employees.find({}, {"email": 0, "_id": 0, "phone": 0, "job_title": 0})

Q8) In the product collection, display all the product id, product name and standard cost where products are in the list of ids (5,8,9,30,50,70,80) or the list price is above 1000
Ans) db.products.find({"$or": [{"product_id": {"$in": [5, 8, 9, 30, 50, 70, 80]}}, {"list_price": {"$gt": 1000}}]}, {"product_id": 1, "product_name": 1, "standard_cost": 1, "_id": 0})

Q9) In the product collection, update product ids 1,3 and 5 to have a new key/value pair quantity as 100 and their new list price as 1000, once updated display those product ids, product name and list price
Ans) db.products.updateMany({"product_id": {"$in": [1, 3, 5]}}, {"$set": {"quantity": 100, "list_price": 1000}})